// Default NPC Checks
// Author: Wushin, meko

// Range
// Map, X, Y, Distance in Tiles
// setarray @npc_loc, 24, 113, 4;
function|script|PCtoNPCRange
{
    set @npc_check, 0;
    set @Nmap$, getmap() + ".gat";
    set @Nx1, (@npc_loc[0] - @npc_loc[2]);
    set @Ny1, (@npc_loc[1] - @npc_loc[2]);
    set @Nx2, (@npc_loc[0] + @npc_loc[2]);
    set @Ny2, (@npc_loc[1] + @npc_loc[2]);
    if (isin(@Nmap$, @Nx1, @Ny1, @Nx2, @Ny2))
        goto L_Return;
    set @npc_check, 1;
    goto L_Return;

L_Return:
    return;
}

// Inventory & Weight & Zeny
// @delitem$ Items to delete
// @delitem Counts of Items to delete
// @getitem$ Items to get
// @getitem Counts of Items to get
// @delzeny Zeny to remove after succesful transaction
// @getzeny Zeny to add after succesful transaction
function|script|CheckInventory
{
    set @del_loop, 0;
    set @get_loop, 0;
    set @delitem_loop, 0;
    set @getitem_loop, 0;
    set @check_fail, 0;
    set @msg_loop, 0;
    if(getarraysize(@getitem$) != getarraysize(@getitem)) goto L_ArraySize;
    if(getarraysize(@delitem$) != getarraysize(@delitem)) goto L_ArraySize;
    if((@getitem$[0] == "") && (@delitem$[0] == "")) goto L_NoRequest;
    if (@gelitem$ || @detitem$ || @gelitem || @detitem) goto L_Typo;
    if (@delitem$[0] != "")
        goto L_DelItemsLoop;
    goto L_CheckGet;

L_DelItemsLoop:
    if (getitemname(@delitem$[@delitem_loop]) == "Unknown Item")
        goto L_DelUnknownItem;
    if(countitem(@delitem$[@delitem_loop]) < @delitem[@delitem_loop])
        goto L_ReturnMissing;
    set @delitem_loop, (@delitem_loop + 1);
    if(@delitem_loop == getarraysize(@delitem$))
        goto L_CheckGet;
    goto L_DelItemsLoop;

L_CheckGet:
    if (@getitem$[0] != "")
        goto L_CheckWeight;
    goto L_DelCheck;

L_CheckWeight:
    getinventorylist;
    if (101 < (@inventorylist_count + getarraysize(@getitem$)))
        goto L_ReturnSpace;
    goto L_GetItemsLoop;

L_GetItemsLoop:
    if (getitemname(@getitem$[@getitem_loop]) == "Unknown Item")
        goto L_GetUnknownItem;
    if (checkweight(@getitem$[@getitem_loop], @getitem[@getitem_loop]) == 0)
        goto L_ReturnWeight;
    set @getitem_loop, (@getitem_loop + 1);
    if(@getitem_loop == getarraysize(@getitem$))
        goto L_DelCheck;
    goto L_GetItemsLoop;

L_DelCheck:
    if (@delitem$[0] != "")
        goto L_DelLoop;
    goto L_CheckGet2;

L_DelLoop:
    callsub S_Zeny;
    delitem @delitem$[@del_loop], @delitem[@del_loop];
    set @del_loop, (@del_loop + 1);
    if(@del_loop == getarraysize(@delitem$))
        goto L_GetLoop;
    goto L_DelLoop;

L_CheckGet2:
    if (@getitem$[0] != "")
        goto L_GetLoop;
    goto L_Return;

L_GetLoop:
    callsub S_Zeny;
    misceffect FX_GETITEM, strcharinfo(0);
    getitem @getitem$[@get_loop], @getitem[@get_loop];
    set @get_loop, (@get_loop + 1);
    if(@get_loop == getarraysize(@getitem$))
        goto L_Return;
    goto L_GetLoop;

L_ReturnMissing:
    set @check_fail, 1;
    if(!@silent && !@silent1) mes "\"You are missing required items.\"";
    goto L_MissingMsg;

L_MissingMsg:
    if(!@silent && !@silent1) mes getitemname(@delitem$[@msg_loop]) +" "+ countitem(@delitem$[@msg_loop])+"/"+@delitem[@msg_loop];
    set @msg_loop, (@msg_loop + 1);
    if(@msg_loop == getarraysize(@delitem$))
        goto L_Return;
    if (getitemname(@delitem$[@msg_loop]) == "Unknown Item")
        goto L_DelUnknownItem2;
    goto L_MissingMsg;

L_ReturnWeight:
    if(!@silent && !@silent2) mes "\"You need to be carrying less weight.\"";
    if(!@silent && !@silent2) next;
    set @check_fail, 2;
    goto L_Return;

L_ReturnSpace:
    if(!@silent && !@silent3) mes "\"You need more room in your inventory.\"";
    if(!@silent && !@silent3) next;
    set @check_fail, 3;
    goto L_Return;

L_ReturnZeny:
    if(!@silent && !@silent4) mes "\"You do not have enough gp.\"";
    if(!@silent && !@silent4) mes "You have "+ Zeny + "/" + @delzeny + " gp.";
    if(!@silent && !@silent4) mes "You need "+ (@delzeny - Zeny) + " more gp.";
    if(!@silent && !@silent4) next;
    set @check_fail, 4;
    goto L_Return;

L_GetUnknownItem:
    debugmes "Unknown item: "+ @getitem$[@getitem_loop];
    mapexit;

L_DelUnknownItem:
    debugmes "Unknown item: "+ @delitem$[@delitem_loop];
    mapexit;

L_DelUnknownItem2:
    debugmes "Unknown item: "+ @delitem$[@msg_loop];
    mapexit;

L_ArraySize:
    debugmes "Array size mismatch";
    mapexit;

L_NoRequest:
    debugmes "Nothing to add or remove.";
    mapexit;

L_Typo:
    debugmes "Typo!";
    mapexit;

S_Zeny:
    // this ensures that a zeny transaction can only occur if there is no error
    if(@delzeny && (Zeny < @delzeny)) goto L_ReturnZeny;
    if(@delzeny) set Zeny, Zeny - @delzeny;
    if(@delzeny) set @delzeny, 0;
    if(@getzeny) set Zeny, Zeny + @getzeny;
    if(@getzeny) set @getzeny, 0;
    return;

L_Return:
    cleararray @delitem$, "", getarraysize(@delitem$);
    cleararray @delitem, 0, getarraysize(@delitem);
    cleararray @getitem$, "", getarraysize(@getitem$);
    cleararray @getitem, 0, getarraysize(@getitem);
    set @getzeny, 0;
    set @delzeny, 0;
    set @silent, 0;
    set @silent1, 0;
    set @silent2, 0;
    set @silent3, 0;
    set @silent4, 0;
    return;
}
